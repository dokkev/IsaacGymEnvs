# used to create the object
name: FrankaCubePush

physics_engine: ${..physics_engine}

# if given, will override the device setting in gym. 
env:
  numEnvs: ${resolve_default:8192,${...num_envs}}
  envSpacing: 1.5
  episodeLength: 300
  enableDebugVis: False
  enablePrivInfoPrint: False # it won't print if randomize is false
  includePrivInfo: False #include priv info in the observation

  clipObservations: 5.0
  clipActions: 1.0

  cubeInitPosNoise: 0.2
  cubeInitOriNoise: 3.14
  cubeGoalPosNoise: 0.2
  cubeGoalOriNoise: 0.0

  frankaPositionNoise: 0.0
  frankaRotationNoise: 0.0
  frankaDofNoise: 0.0


  aggregateMode: 3

  actionScale: 1.0

  posRewardScale: 1.0
  oriRewardScale: 0.0
  contactRewardScale: 0.1
  successRewardScale: 1.0
  
  propHistoryLen: 30
  privInfoDim: 9 


  controlType: osc  # options are {joint_tor, osc}
  controlInput: pose3d # options are {pose3d, pose6d}
  varialbeImpedance: False

  asset:
    assetRoot: "../../assets"
    assetFileNameFranka: "urdf/franka_description/robots/franka_panda_gripper.urdf"

  # set to True if you use camera sensors in the environment
  enableCameraSensors: False

sim:
  dt: 0.01667 # 1/60
  substeps: 2
  up_axis: "z"
  use_gpu_pipeline: ${eq:${...pipeline},"gpu"}
  gravity: [0.0, 0.0, -9.81]
  physx:
    num_threads: ${....num_threads}
    solver_type: ${....solver_type}
    use_gpu: ${contains:"cuda",${....sim_device}} # set to False to run on CPU
    num_position_iterations: 8
    num_velocity_iterations: 1
    contact_offset: 0.005
    rest_offset: 0.0
    bounce_threshold_velocity: 0.2
    max_depenetration_velocity: 1000.0
    default_buffer_size_multiplier: 5.0
    max_gpu_contact_pairs: 1048576 # 1024*1024
    num_subscenes: ${....num_subscenes}
    contact_collection: 0 # 0: CC_NEVER (don't collect contact info), 1: CC_LAST_SUBSTEP (collect only contacts on last substep), 2: CC_ALL_SUBSTEPS (broken - do not use!)

task:
  randomize: False
  randomization_params:
    frequency: 720   # Define how many simulation steps between generating new randomizations
    observations:
      range: [0, .002] # range for the white noise
      range_correlated: [0, .001] # range for correlated noise, refreshed with freq `frequency`
      operation: "additive"
      distribution: "gaussian"
      # schedule: "linear"   # "constant" is to turn on noise after `schedule_steps` num steps
      # schedule_steps: 40000
    actions:
      range: [0., .05]
      range_correlated: [0, .015] # range for correlated noise, refreshed with freq `frequency`
      operation: "additive"
      distribution: "gaussian"
      # schedule: "linear"  # "linear" will linearly interpolate between no rand and max rand
      # schedule_steps: 40000
    sim_params: 
      gravity:
        range: [-0.2, 0.2]
        operation: "additive"
        distribution: "gaussian"
        # schedule: "linear"  # "linear" will linearly interpolate between no rand and max rand
        # schedule_steps: 40000

    actor_params:
      franka:
        dof_properties:
          damping:
            range: [0.1, 0.5]
            operation: "scaling"
            distribution: "loguniform"
            # schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            # schedule_steps: 30000
          stiffness:
            range: [0.1, 0.5]
            operation: "scaling"
            distribution: "loguniform"
            # schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            # schedule_steps: 30000
          lower: #lower limit of DOF (rad or m)
            range: [-0.01, 0.01]
            operation: "additive"
            distribution: "gaussian"
            # schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            # schedule_steps: 30000
          upper: #upper limit of DOF (rad or m)
            range: [-0.01, 0.01]
            operation: "additive"
            distribution: "gaussian"
            # schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            # schedule_steps: 30000
        rigid_body_properties:
          mass:
            range: [0.8, 1.2]
            operation: "scaling"
            distribution: "uniform"
            setup_only: True # Property will only be randomized once before simulation is started. See Domain Randomization Documentation for more info.
            # schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            # schedule_steps: 30000
        rigid_shape_properties:
          friction:
            num_buckets: 250
            range: [0.9, 1.1]
            operation: "scaling"
            distribution: "uniform"
      
      cube:
        color: True
        rigid_body_properties:
          mass:
            range: [0.1, 10.]
            operation: "scaling"
            distribution: "uniform"
            setup_only: True # Property will only be randomized once before simulation is started. See Domain Randomization Documentation for more info.
            # schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            # schedule_steps: 30000
          com:
            # range: [[-0.02, 0.02], [-0.02, 0.02], [-0.01, 0.01]]
            range: [-0.04, 0.04]
            distribution: "uniform"
            operation: "additive" 

        rigid_shape_properties:
          friction:
            num_buckets: 250
            range: [0.1, 3.0]
            operation: "scaling"
            distribution: "uniform"

